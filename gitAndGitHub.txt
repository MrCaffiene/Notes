day1 3-1-2024 wednesday

Git
is a version Control System ie a tool that helps to track changes in code.
it is free, open source and fast and scalable. 

GitHub
is a website that allows developers to store and manage their code using Git.
https://github.com

set up for git and github

for windows 
vscode 
github
gitbash 

for mac 
vscode 
github 
terminal 

configuring git 
git config --global user.name "MrCaffiene"
git config --local user.name "MrCaffiene"

git config --global user.email "ankitdhotre21@gmail.com"
git config --local user.email "ankitdhotre21@gmail.com"

to check users
git config --list

git commands

clone = cloning a repo on our local machine
git clone <-https or ssl link from github green code button->
status = display the status of the code
git status 
if git status showed error note the following command
git config --global --add safe.directory D:/Projects/GitHub/first_repo

Example for Sparse Checkout
Suppose you want to work on src/example-file.js in the main branch of a repository located at https://github.com/user/repo.git.

1-Initialize a new Git repository:
mkdir example-repo
cd example-repo
git init

2-Add the remote repository:
git remote add origin https://github.com/user/repo.git

3-Enable sparse checkout:
git config core.sparseCheckout true

4-Specify the file you want:
echo "src/example-file.js" >> .git/info/sparse-checkout

5-Pull the specific file from the repository:
git pull origin main

6-Edit the file:
  Make your changes to src/example-file.js.

7-Stage the file:
git add src/example-file.js

8-Commit your changes:
git commit -m "Edit src/example-file.js"

9-Push your changes:
git push origin main


git status indicators 
untracked(U) = not yet tracked by Git  
modified(M) = modified file 
staged()  = ready for commit 
unmodified() = unchanged 

repository -> newfile(U) -> staged(add) -> commit(save) -> modified(M) -> staged(add) -> commit(save) 


Add and Commit command 

adds new or changed files in your working directory to your staging area 
git add <-filename->
git add .

record of change done
git commit -m "message"


Push command 
upload changes to github repo
git push origin main 
git push -u origin main (when working on the same branch for a period ie to set up upstream)


init command 
create a new repo on git (not GitHub)
git init 
git remote add origin <-link->
git remote -v  (to verify remote)
git branch (to verify branch)
git branch -M BranchNewName (to change .this branch name)
git checkout otherBranchName (to switch to a branch )
git checkout -b newBranchName (to create a new branch)
git branch -d branchName (to delete a new branch)


Merging code 

Way1 
git diff otherBranchName (to compare with other branch)
git merge branchName (to merge changes to the branch)

Way2 
create a PR (pull request on GitHub)
pull request 
lets you tell others about the changes you have pushed to your branch on the github repository 


pull command 
is used to fetch and download content from a remote repository and immediatiely update the local repo to match the remote repository
git pull origin main 


merging conflicts
is an event that takes place when git is unable to automatically resolve differences in code between two commits.

choose either current or incuming or keep both 


undoing changes 

case 1: staged changes (after adding file)
git reset filename
git reset    (for all files at once)

case 2: commited changes (for 1 commit)
git reset HEAD~1

case 3: commited changes (for multiple commits)
git reset commitHash (use git log for getting hash code)
git reset --hard commitHash (will remove changes from git as well as vscode)

git log (to check commit logs use Q to quit logs)


git fork 
is a new repo that share the same code and visibility settings with the original upstream repository. It is a rough copy.

After fork and completion of work dont forget to hit the pull request.
